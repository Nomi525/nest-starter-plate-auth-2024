generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid()) @db.Uuid
  first_name        String
  last_name         String?
  empId             String              @unique @default("EMPID_01")
  email             String              @unique
  pwd_hash          String
  email_confirmed   Boolean             @default(false)
  phone_confirmed   Boolean             @default(false)
  knownLanguages    Language[]          @relation("UserLanguages")
  phoneNumber       String?             @unique
  role              UserRole
  AuthToken         AuthToken[]
  UploadedFiles     File[]              @relation("UserUploadedFiles")
  UserConfirmation  UserConfirmation?
  Preference        Preference[]
  image_id          String?             @db.Uuid
  Image             Image?              @relation(fields: [image_id], references: [id])
  EmployeeShift     EmployeeShift?
  Calls             Call[]              @relation("EmployeeCalls")
  AssignedCalls     Call[]              @relation("AssignedCalls")
  CallTransfer      CallTransfer[]
  CallLink          CallLink[]
  Notification      Notification[]
  EmployeeActivity  EmployeeActivity[]
  Break             Break[]
  CallTransferQueue CallTransferQueue[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([email])
}

model EmployeeShift {
  id                    String   @id @default(uuid()) @db.Uuid
  employee_id           String   @unique @db.Uuid
  user                  User     @relation(fields: [employee_id], references: [id])
  shift_start_date      DateTime
  shift_end_date        DateTime
  shift_duration        String
  employment_active     Boolean
  employment_start_date DateTime
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now()) @updatedAt
}

enum UserRole {
  GUEST
  EMPLOYEE
  MANAGER
  ADMIN
}

model Language {
  id         String   @id @default(uuid()) @db.Uuid
  name       String // e.g. English, Hindi
  users      User[]   @relation("UserLanguages")
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Call {
  id             String          @id @default(uuid()) @db.Uuid
  clientName     String
  clientNumber   String
  clientLanguage String
  description    String?
  status         CallStatus
  recordingURL   String?
  startTime      DateTime
  endTime        DateTime?
  duration       Int?
  assignedTo     User            @relation("AssignedCalls", fields: [assignedToId], references: [id])
  assignedToId   String          @db.Uuid
  handledBy      User            @relation("EmployeeCalls", fields: [handledById], references: [id])
  handledById    String          @db.Uuid
  FollowUps      FollowUp[]
  CallTransfers  CallTransfer[]
  CallLinks      CallLink[]
  CallRecording  CallRecording[]
  createdAt      DateTime        @default(now())
  updated_at     DateTime        @default(now()) @updatedAt

  @@index([assignedToId, status])
}

enum CallStatus {
  ONGOING
  COMPLETED
  FAILED
  PENDING
}

model FollowUp {
  id         String   @id @default(uuid()) @db.Uuid
  scheduleAt DateTime
  callId     String   @db.Uuid
  Call       Call     @relation(fields: [callId], references: [id])
  notes      String?
  createdAt  DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model CallTransfer {
  id              String   @id @default(uuid()) @db.Uuid
  OriginalCall    Call     @relation(fields: [originalCallId], references: [id])
  originalCallId  String   @db.Uuid
  TransferredTo   User     @relation(fields: [transferredToId], references: [id])
  transferredToId String   @db.Uuid
  transferReason  String?
  createdAt       DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt
}

model CallLink {
  id         String   @id @default(uuid()) @db.Uuid
  Call       Call     @relation(fields: [callId], references: [id])
  callId     String   @db.Uuid
  linkURL    String
  SharedBy   User     @relation(fields: [sharedById], references: [id])
  sharedById String   @db.Uuid
  createdAt  DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

enum NotificationType {
  ASSIGNMENT
  TRANSFER
  FOLLOW_UP
  GENERAL
}

model Notification {
  id         Int              @id @default(autoincrement())
  message    String
  User       User             @relation(fields: [userId], references: [id])
  userId     String           @db.Uuid
  isRead     Boolean          @default(false)
  type       NotificationType
  createdAt  DateTime         @default(now())
  updated_at DateTime         @default(now()) @updatedAt
}

model EmployeeActivity {
  id         String         @id @default(uuid()) @db.Uuid
  Employee   User           @relation(fields: [employeeId], references: [id])
  employeeId String         @db.Uuid
  status     ActivityStatus
  createdAt  DateTime       @default(now())
  updated_at DateTime       @default(now()) @updatedAt
}

model Break {
  id         String   @id @default(uuid()) @db.Uuid
  Employee   User     @relation(fields: [employeeId], references: [id])
  employeeId String   @db.Uuid
  startTime  DateTime
  endTime    DateTime
  duration   Int // Duration in minutes (30, 40, 60, 80, 120)
  createdAt  DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

enum ActivityStatus {
  IDLE
  BUSY
  ON_CALL
  ON_BREAK
  OFFLINE
}

model CallTransferQueue {
  id               String   @id @default(uuid()) @db.Uuid
  callId           String
  transferPriority Int // Priority level (1-5)
  assignedToId     String   @db.Uuid
  AssignedTo       User     @relation(fields: [assignedToId], references: [id])
  createdAt        DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt
}

model CallRecording {
  id         String          @id @default(uuid()) @db.Uuid
  Call       Call            @relation(fields: [callId], references: [id])
  callId     String          @db.Uuid
  filePath   String
  duration   Int
  status     RecordingStatus
  compliance Boolean // Ensure recording meets compliance standards
  createdAt  DateTime        @default(now())
  updated_at DateTime        @default(now()) @updatedAt
}

enum RecordingStatus {
  PENDING
  FAILED
  SUCCESS
}

model UserConfirmation {
  id                           String    @id @default(uuid()) @db.Uuid
  created_at                   DateTime  @default(now())
  user_id                      String    @unique @db.Uuid
  User                         User      @relation(fields: [user_id], references: [id])
  confirm_email_code           String?
  confirm_email_code_sent      DateTime?
  confirm_email_code_timelimit DateTime?
  confirm_phone_code           String?
  confirm_phone_code_sent      DateTime?
  confirm_phone_code_timelimit DateTime?
  reset_code                   String?
  reset_code_timelimit         DateTime?
  change_email_to              String?
  change_email_code            String?
  change_email_code_timelimit  DateTime?
  magic_login_code             String?
  magic_login_code_timelimit   DateTime?
}

model AuthToken {
  id         String    @id @default(uuid()) @db.Uuid
  created_at DateTime  @default(now())
  expires_at DateTime?
  user_id    String    @db.Uuid
  User       User      @relation(fields: [user_id], references: [id])
}

enum PreferenceKey {
  SHARE_FULLNAME
  SHARE_FIRSTNAME
  SHARE_PROFILE_IMAGE
}

model Preference {
  id         String        @id @default(uuid()) @db.Uuid
  userId     String        @db.Uuid
  User       User          @relation(fields: [userId], references: [id])
  key        PreferenceKey
  value      String
  createdAt  DateTime      @default(now())
  updated_at DateTime      @default(now()) @updatedAt

  @@unique([userId, key])
}

model Image {
  id         String           @id @default(uuid()) @db.Uuid
  created_at DateTime         @default(now())
  updated_at DateTime         @default(now()) @updatedAt
  Variations ImageVariation[]
  File       File?            @relation(fields: [fileId], references: [id])
  fileId     String?          @db.Uuid
  User       User[]
}

model File {
  id               String           @id @default(uuid()) @db.Uuid
  diskName         String
  originalFileName String
  size             BigInt
  uploader_user_id String           @db.Uuid
  fileFormat       String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now()) @updatedAt
  Uploader         User             @relation("UserUploadedFiles", fields: [uploader_user_id], references: [id])
  Image            Image[]
  ImageVariation   ImageVariation[]
}

enum ImageSize {
  ORIGINAL
  THUMBNAIL
  MEDIUM
  LARGE
}

model ImageVariation {
  id               String    @id @default(uuid()) @db.Uuid
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now()) @updatedAt
  originalImageId  String    @db.Uuid
  OriginalImage    Image     @relation(fields: [originalImageId], references: [id])
  size             ImageSize
  filePath         String
  fileId           String    @db.Uuid
  File             File      @relation(fields: [fileId], references: [id])
  resolutionWidth  Int?
  resolutionHeight Int?
  aspectRatio      Int?
  fileFormat       String?
}
